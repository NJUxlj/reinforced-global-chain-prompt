import random
from sentence_transformers import SentenceTransformer
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA
import numpy as np
import json
import matplotlib.pyplot as plt
import argparse
from autocot_utils import fix_seed


from typing import List, Tuple, Dict


def parse_arguments():
    parser = argparse.ArgumentParser(description="Zero-shot-CoT")
    parser.add_argument(
        "--task", type=str, default="race",
        choices=["race", "dream", "sciq", "commonsense_qa", ], help="dataset used for experiment, select from [race, dream, sciq, commonsense_qa ]"
    )
    parser.add_argument( # criterion, how many reasoning steps
        "--max_ra_len", type=int, default=5, help="maximum number of reasoning chains"
    )
    parser.add_argument( # model's CoT reasoning results (steps)
        "--pred_file", type=str, default="log/multiarith_zero_shot_cot.log",
        help="use the reasoning chains generated by zero-shot-cot."
    )
    parser.add_argument( # where to save the contructed demonstrations of the prompt
        "--demo_save_dir", type=str, default="demos/multiarith", help="where to save the contructed demonstrations"
    )
    parser.add_argument("--random_seed", type=int, default=192, help="random seed")
    
    parser.add_argument(
        "--encoder", type=str, default="all-MiniLM-L6-v2", help="which sentence-transformer encoder for clustering"
    )
    parser.add_argument(
        "--sampling", type=str, default="center", help="whether to sample the cluster center first"
    )
    parser.add_argument(
        "--debug", type=bool, default=True, help="debug mode"
    )
    args = parser.parse_args()
    return args





def main():
    args = parse_arguments()
    fix_seed(args.random_seed)
    encoder = SentenceTransformer(args.encoder) # 传入模型名
    
    
    task = args.task
    pred_file = args.pred_file
    save_file = args.demo_save_dir
    
    # max reasoning step length
    max_ra_len = args.max_ra_len
    
    # this will be set to the number of class labels later
    num_clusters = 8
    
    corpus = []
    question = []
    rationale = []
    gold_ans = []
    pred_ans = []
    
    
    with open(pred_file, "r", encoding="utf-8") as fp:
        answer_seg = ""
        for line in fp:
            if "Q: " in line:
                c_question = line.strip()
            if "A: " in line:
                answer_seg = line # 初始化为 Let's think step by step.
            elif "Therefore" in line and "the answer" in line:
                c_rationale = answer_seg # 检测到推理链结束，准备接收推理链

            elif answer_seg != "":
                answer_seg += line  # 拼接推理步骤
            if "pred_mode" in line: # 预测标签
                c_pred_ans = line.split(":")[1].strip()
            if "GT :" in line: # 真实标签，是当前demo的最后一行
                c_gold_ans = line.split(":")[1].strip()

                c_rationale = c_rationale.replace("A: Let's think step by step.", "Let's think step by step.")
                c_question = c_question + "\nA:"

                corpus.append(c_question)
                question.append(c_question)
                rationale.append(c_rationale)
                pred_ans.append(c_pred_ans)
                if args.debug:
                    gold_ans.append(c_gold_ans)
                answer_seg = ""

    corpus_embeddings = encoder.encode(corpus)
    
    # Perform kmean clustering
    clustering_model = KMeans(n_clusters=num_clusters, random_state=args.random_seed)
    clustering_model.fit(corpus_embeddings)
    # 返回一个数组，表示每个样本所属的聚类标签。
    cluster_assignment = clustering_model.labels_
    
    clustered_sentences = [[] for i in range(num_clusters)]
    # 
    dist = clustering_model.transform(corpus_embeddings)
    # dict{} key: cluster_id, value: a list of sentence embeddings
    clustered_dists = [[] for i in range(num_clusters)]
    # dict{} key: cluster_id, value: a list of sentence indices
    clustered_idx = [[] for i in range(num_clusters)]
    
    for sentence_id, cluster_id in enumerate(cluster_assignment):
        clustered_sentences[cluster_id].append(corpus[sentence_id])
        clustered_dists[cluster_id].append(dist[sentence_id][cluster_id])
        clustered_idx[cluster_id].append(sentence_id)

    demos = []
    
    for i in range(len(clustered_dists)):
        print("Cluster ", i+1)
        # 把一组句子下标，和一组句子到聚类中心的距离，封装成一个元组列表
        tmp = list(map(list, zip(range(len(clustered_dists[i])), clustered_dists[i])))
        # 把当前cluster中所有的question-cluster距离，按照离聚类中心从小到大进行排序
        top_min_dist = sorted(tmp, key=lambda x: x[1], reverse=False)
        if not args.sampling == "center":
            random.shuffle(top_min_dist)
        for element in top_min_dist: # for each question q_j^(i) in q^(i)
            min_idx = element[0] # 取出最短的距离对应question的下标
            c_rationale = rationale[clustered_idx[i][min_idx]].strip() # r_j^(i)
            c_pred_ans = pred_ans[clustered_idx[i][min_idx]].strip() # a_j^(i)

            # if satisfy the criterion
            if len(question[clustered_idx[i][min_idx]].strip().split()) <= 60 \
                and len(c_rationale.replace("\n\n", "\n").split("\n")) <= max_ra_len and c_rationale[-1] == "." and c_pred_ans != "":
                if args.task in ["race", "multirc", "arc", "record"]:
                    if not (c_pred_ans.strip() in c_rationale.split(".")[-2] or c_pred_ans.strip() in c_rationale.split()[-10:]):
                        continue
                c_question = question[clustered_idx[i][min_idx]]
                c_rationale = c_rationale.replace("\n\n", "\n").replace("\n", " ").strip()
                c_rationale = " ".join(c_rationale.split())
                if args.debug:
                    c_gold_ans = gold_ans[clustered_idx[i][min_idx]]
                else:
                    c_gold_ans = None
                demo_element = {
                    "question": c_question,
                    "rationale": c_rationale,
                    "pred_ans": c_pred_ans,
                    "gold_ans": c_gold_ans,
                }
                demos.append(demo_element)
                print(c_question)
                print(c_rationale)
                print(c_pred_ans)
                print(c_gold_ans)
                print("")
                break

    demos:Dict[List[Dict]] = {"demo": demos}

    with open(args.demo_save_dir, 'w', encoding="utf-8") as write_f:
        json.dump(demos, write_f, indent=4, ensure_ascii=False)